from django.db import models

# Create your models here.


class Feedback(models.Model):
    username=models.CharField(max_length=20)
    course=models.CharField(max_length=40)
    positive=models.IntegerField()
    negative=models.IntegerField()

    def __str__(self):
        return self.username


class Message(models.Model):
    f_id= models.ForeignKey('Feedback',on_delete=models.CASCADE)
    msg = models.CharField(max_length=40)
    status = models.IntegerField()                      #status shows strangth--1   , weakness---0
    timestamp= models.DateTimeField(
        auto_now_add=True,
        auto_now=False
    )

    def __str__(self):
        return self.msg




        from django.http import HttpResponse
        from django.shortcuts import render
        import json
        import math
        from random import randint
        from . import sentiment2
        from feedback.models import Feedback
        from feedback.models import Message

        def home(request):
            #return HttpResponse('Home page')
            #return render(request,'homepage.html')
            request.session['positive']=0
            request.session['negative']=0
            request.session['username']='aishu'
            request.session['course']='ads'
            feedbackObj= Feedback(
                username=request.session['username'],
                course=request.session['course'],
                positive=request.session['positive'],
                negative=request.session['negative']
            )
            feedbackObj.save()
            request.session['f_id']=feedbackObj.id
            return render(request, 'index1.html')

        def index(request):
            return render(request,'index.html')

        def messages(request):
            return render(request,'chat.html')

        def getresponse(request):
            print('in response')
            cnt = request.GET.get('count', None)
            print('cnt--'+cnt)
            count=int(cnt)

            response_data = {}

            if(count==12):
                response_data['res'] = 'Okay we are done then...Thank you!! :)'
                feedbackObj = Feedback.objects.get(id=request.session['f_id'])
                feedbackObj.positive = request.session['positive']
                feedbackObj.negative = request.session['negative']
                feedbackObj.save()                           # this will update only
                return HttpResponse(json.dumps(response_data), content_type="application/json")

            if(count>12):
                response_data['res'] = 'We have collected your feedback... You can exit the window now!! :)'
                return HttpResponse(json.dumps(response_data), content_type="application/json")

            row=int(count/2)

            if(count==0):
                response_data['res'] = getQuestion(row, 0)
                return HttpResponse(json.dumps(response_data), content_type="application/json")

            if(count%2==0):
                col=0
                fobj= Feedback.objects.get(id=request.session['f_id'])
                msgObj= Message(
                f_id= fobj,
                msg=""+request.GET.get('responseString', ""),
                status=request.session['sentiment']
                )
                msgObj.save()
            else:
                request.session['lastResponse']= ""+request.GET.get('responseString', "")

                pos,neg = sentiment2.predict(request.session['lastResponse'])
                print('sentiment analysis on--'+ request.session['lastResponse'])
                request.session['positive']+=int(math.floor(float(pos)))
                request.session['negative']+=int(math.floor(float(neg)))

                if(pos>neg):
                    request.session['sentiment'] = 1
                    col=1
                else:
                    request.session['sentiment'] = 0
                    col=2

            response_data['res'] = getQuestion(row, col)
            #response_data['message'] = 'Some error message'
            #return HttpResponse({'record':'str data'}, content_type='json')
            return HttpResponse(json.dumps(response_data), content_type="application/json")


        def getQuestion(row, col):
            #Course objective
            q1=[['Are you satisfied with course objective?','Do you think the mentioned course objectives are proper?','Does the course objectives match your level of expectations?'],['What would you like to add to make course better?','How do you want to make course better?'],['What would you want to include?','What lessons do you think should be excluded from the syllabus of this course?']]

            #Teaching style
            q2=[['Are you satisfied with teaching skill/style?','Do you agree with the teaching style?','Do you get all the things taught in the classroom?'],['What you liked most about teaching?','What is the best part about the teaching style?'],['Then what kind of classes you would like?','What you dont like about teaching?']]
            #,['Suggest some improvements on teaching style.','What kind of teaching you expect for the teachers?']

            #Interactivity
            q3=[['Is teacher taking lectures more interactively?','Does teacher make lectures interesting?','Did you get extra knowledge other than academics?'],['What kind of activities he/she conducts?','Interesting in which way?'],['How do you expect the lectures should be for this course?','What are your expectations about conducting lectures?']]

            #Understanding of studies
            q4=[['Do you understand all the points taught in classroom?','Does teacher clear all of your doubts?','Does teacher arrange extra lectures for you?'],['How teacher conducts extra lectures?','How that lectures worth for your examination?'],['What would you like to change in explaination style?','Can you tell me what points you dont understand in the class?']]
            #,['What are your suggestions about teaching?','Suggest anything about teaching?']

            #Displines
            q5=[['Does teacher maintain discipline in the classroom?','Does class maintains silence while teaching?','Do you feel like sitting in the class is waste of time?'],['What classroom rules does the teacher follows?','How teacher maintains silence?'],['What improvements would you suggest?','According to you, how teacher should handle indisciplines?']]

            #Exams
            q6=[['Do you think exams taken for this course are beneficial?','Do you agree with the examination pattern?','Is there really a need for conducting exams for this course?'],['What different ways for taking the exam can we try?','Tell me different ways of conducting exams?'],['What kind of questions do you expect?','What do you think about the question difficulty level?']]

            questions=[q1,q2,q3,q4,q5,q6]

            rno= randint(0,len(questions[row][col])-1)

            return questions[row][col][rno]
